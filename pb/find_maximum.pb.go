// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/find_maximum.proto

/*
Package fmpb is a generated protocol buffer package.

It is generated from these files:
	pb/find_maximum.proto

It has these top-level messages:
	FindMaximumRequest
	FindMaximumResponse
*/
package fmpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindMaximumRequest struct {
	Num int32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *FindMaximumRequest) Reset()                    { *m = FindMaximumRequest{} }
func (m *FindMaximumRequest) String() string            { return proto.CompactTextString(m) }
func (*FindMaximumRequest) ProtoMessage()               {}
func (*FindMaximumRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FindMaximumRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type FindMaximumResponse struct {
	Max int32 `protobuf:"varint,1,opt,name=max" json:"max,omitempty"`
}

func (m *FindMaximumResponse) Reset()                    { *m = FindMaximumResponse{} }
func (m *FindMaximumResponse) String() string            { return proto.CompactTextString(m) }
func (*FindMaximumResponse) ProtoMessage()               {}
func (*FindMaximumResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FindMaximumResponse) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func init() {
	proto.RegisterType((*FindMaximumRequest)(nil), "find_maximum.FindMaximumRequest")
	proto.RegisterType((*FindMaximumResponse)(nil), "find_maximum.FindMaximumResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FindMaximumService service

type FindMaximumServiceClient interface {
	FindMaximum(ctx context.Context, opts ...grpc.CallOption) (FindMaximumService_FindMaximumClient, error)
}

type findMaximumServiceClient struct {
	cc *grpc.ClientConn
}

func NewFindMaximumServiceClient(cc *grpc.ClientConn) FindMaximumServiceClient {
	return &findMaximumServiceClient{cc}
}

func (c *findMaximumServiceClient) FindMaximum(ctx context.Context, opts ...grpc.CallOption) (FindMaximumService_FindMaximumClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FindMaximumService_serviceDesc.Streams[0], c.cc, "/find_maximum.FindMaximumService/FindMaximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &findMaximumServiceFindMaximumClient{stream}
	return x, nil
}

type FindMaximumService_FindMaximumClient interface {
	Send(*FindMaximumRequest) error
	Recv() (*FindMaximumResponse, error)
	grpc.ClientStream
}

type findMaximumServiceFindMaximumClient struct {
	grpc.ClientStream
}

func (x *findMaximumServiceFindMaximumClient) Send(m *FindMaximumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *findMaximumServiceFindMaximumClient) Recv() (*FindMaximumResponse, error) {
	m := new(FindMaximumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FindMaximumService service

type FindMaximumServiceServer interface {
	FindMaximum(FindMaximumService_FindMaximumServer) error
}

func RegisterFindMaximumServiceServer(s *grpc.Server, srv FindMaximumServiceServer) {
	s.RegisterService(&_FindMaximumService_serviceDesc, srv)
}

func _FindMaximumService_FindMaximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FindMaximumServiceServer).FindMaximum(&findMaximumServiceFindMaximumServer{stream})
}

type FindMaximumService_FindMaximumServer interface {
	Send(*FindMaximumResponse) error
	Recv() (*FindMaximumRequest, error)
	grpc.ServerStream
}

type findMaximumServiceFindMaximumServer struct {
	grpc.ServerStream
}

func (x *findMaximumServiceFindMaximumServer) Send(m *FindMaximumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *findMaximumServiceFindMaximumServer) Recv() (*FindMaximumRequest, error) {
	m := new(FindMaximumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FindMaximumService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "find_maximum.FindMaximumService",
	HandlerType: (*FindMaximumServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindMaximum",
			Handler:       _FindMaximumService_FindMaximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/find_maximum.proto",
}

func init() { proto.RegisterFile("pb/find_maximum.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x48, 0xd2, 0x4f,
	0xcb, 0xcc, 0x4b, 0x89, 0xcf, 0x4d, 0xac, 0xc8, 0xcc, 0x2d, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x41, 0x16, 0x53, 0x52, 0xe3, 0x12, 0x72, 0xcb, 0xcc, 0x4b, 0xf1, 0x85, 0x70,
	0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0xf3, 0x4a, 0x73, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x58, 0x83, 0x40, 0x4c, 0x25, 0x75, 0x2e, 0x61, 0x14, 0x75, 0xc5, 0x05, 0xf9,
	0x79, 0xc5, 0xa9, 0x20, 0x85, 0xb9, 0x89, 0x15, 0x30, 0x85, 0xb9, 0x89, 0x15, 0x46, 0x79, 0x28,
	0x06, 0x06, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x45, 0x70, 0x71, 0x23, 0x89, 0x0a, 0x29,
	0xe8, 0xa1, 0x38, 0x0c, 0xd3, 0x05, 0x52, 0x8a, 0x78, 0x54, 0x40, 0xec, 0x56, 0x62, 0xd0, 0x60,
	0x34, 0x60, 0x74, 0x62, 0x8b, 0x62, 0x49, 0xcb, 0x2d, 0x48, 0x4a, 0x62, 0x03, 0xfb, 0xce, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xec, 0xd9, 0x30, 0x2f, 0xf6, 0x00, 0x00, 0x00,
}
